{"data":{"mdx":{"id":"954ac65c-c42b-54ce-824a-16790b8ec51f","frontmatter":{"title":"Designing in the Browser Faster","date":"April 14, 2014","draft":null},"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Designing in the Browser Faster\",\n  \"date\": \"2014-04-14T00:00:00.000Z\",\n  \"crossposted\": [\"https://medium.com/@jxnblk/designing-in-the-browser-faster-bd413d2bc4f3\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components\n  }), mdx(\"p\", null, \"I\\u2019ve been dabbling with HTML and CSS for years\\u2014building small websites for myself and friends and building prototypes to test designs. And, while I\\u2019ve been fascinated with the idea of designing in the browser for a long time, it wasn\\u2019t until recently that it\\u2019s become much, much faster for me than using traditional design software.\"), mdx(\"h2\", {\n    \"id\": \"getting-faster\"\n  }, \"Getting faster\"), mdx(\"p\", null, \"Practice has certainly helped, but what really sped up my ability to design and iterate in code was an approach called Object Oriented CSS, or OOCSS. My friend and colleague sent me down this scary-sounding path over a year ago, and I haven\\u2019t looked back since. He gave me a ton of reading material, coached me with code reviews, and constantly challenged me. Most of the articles on OOCSS focus on front-end performance, code maintenance benefits, and things like naming conventions. What most people don\\u2019t tell you is how much faster it can make designing in code.\"), mdx(\"h2\", {\n    \"id\": \"do-one-thing-well\"\n  }, \"Do one thing well\"), mdx(\"p\", null, \"At its core, OOCSS focuses on highly reusable styles that follow the open/closed principle\\u2014that is, they\\u2019re open for extension, but closed for modification. They do one thing and do it well. You can think of them as something like layer effects or color swatches. When I\\u2019m fleshing out a design, I spend a lot of time adjusting spacing, font sizes, colors, and other small details. I often don\\u2019t know what combination of styles each element should have before I see it in context.\"), mdx(\"h2\", {\n    \"id\": \"dont-make-assumptions\"\n  }, \"Don\\u2019t make assumptions\"), mdx(\"p\", null, \"For new web projects, I usually start with a base type scale, spacing scale, and a rough color palette. Having these separated into single-purpose utilities gives me the flexibility to jump straight into HTML and experiment, without having to constantly write and rewrite CSS. I try not to make assumptions about what any one element or module will end up looking like. Instead, I make sure each element feels right in context, then create more defined patterns when needed.\"), mdx(\"h2\", {\n    \"id\": \"content-centric-design\"\n  }, \"Content-centric design\"), mdx(\"p\", null, \"Using single-purpose styles aligns well with the concept of content-centric design. Defining heading styles without knowing what they say or where they\\u2019re located can be difficult. Having the ability to quickly adjust type hierarchy, color, and other styles to get the rhythm, balance, and gestalt right is key to successfully designing in the browser.\"), mdx(\"h2\", {\n    \"id\": \"from-paper-to-prototype\"\n  }, \"From paper to prototype\"), mdx(\"p\", null, \"Using this approach, I typically go directly from notes and paper sketches to building prototypes in code. The only time I open graphic applications like Illustrator or Photoshop are when I need to create image assets to use in code. And with tools like Github, I can try out a number of iterations on different branches in a non-destructive way.\"), mdx(\"h2\", {\n    \"id\": \"choose-the-right-tools\"\n  }, \"Choose the right tools\"), mdx(\"p\", null, \"Personally, this has sped up my workflow tremendously, and every designer I\\u2019ve introduced to this approach has picked it up quickly and enthusiastically. You might find OOCSS to be a useful addition to your design toolkit as well.\"));\n}\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"954ac65c-c42b-54ce-824a-16790b8ec51f"}}