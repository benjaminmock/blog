{"data":{"mdx":{"id":"8873dabf-cccd-565c-8309-226d7ccd5791","frontmatter":{"title":"Color Palette Documentation for Living Style Guides","date":"June 15, 2015","draft":null},"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Color Palette Documentation for Living Style Guides\",\n  \"date\": \"2015-06-15T00:00:00.000Z\",\n  \"tags\": [\"css\", \"color\", \"documentation\", \"style guide\", \"living style guide\", \"color contrast\", \"accessibility\", \"a11y\"],\n  \"related\": [{\n    \"name\": \"Colorable\",\n    \"href\": \"http://jxnblk.com/colorable\"\n  }, {\n    \"name\": \"Basscss Color Combinations\",\n    \"href\": \"http://basscss.com/docs/reference/color-combinations\"\n  }, {\n    \"name\": \"PostCSS\",\n    \"href\": \"https://github.com/postcss/postcss\"\n  }, {\n    \"name\": \"Color\",\n    \"href\": \"https://npmjs.com/package/color\"\n  }],\n  \"meta\": {\n    \"card\": \"summary_large_image\",\n    \"image\": \"http://jxnblk.s3.amazonaws.com/assets/images/css-color-combos.jpg\"\n  }\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components\n  }), mdx(\"p\", null, \"Virtually every style guide has a color palette section in its documentation.\\nMany times I\\u2019ve seen this documentation created manually, where every change to a color requires updating the values in two places \\u2013 the stylesheet and the style guide.\\nThis often leads to one falling out of sync with the other,\\nand makes maintaining a living style guide more difficult.\"), mdx(\"p\", null, \"The problem with this approach is that the values are being defined in two different places.\\nFor a true living style guide, the code should serve as the single source of truth.\\nExtracting color values from CSS can help keep documentation in sync,\\nexpose outdated colors, and point out opportunities for normalizing designs.\"), mdx(\"p\", null, \"The following will show how to use Node.js to build source-code-derived documentation for color palettes\\nand present color contrast values for each possible pairing as a guide for usage.\"), mdx(\"h2\", {\n    \"id\": \"initial-setup\"\n  }, \"Initial Setup\"), mdx(\"p\", null, \"If you\\u2019re already using Node.js in your build system,\\nyou can integrate this directly into your project.\\nFor the purposes of this tutorial, create a new sandboxed project to experiment with.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"mkdir color-documentation\\ncd color-documentation\\nnpm init\\n\")), mdx(\"p\", null, \"Install the following modules.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm i --save-dev postcss color colorable lodash\\n\")), mdx(\"p\", null, \"The \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/postcss/postcss\"\n  }), \"PostCSS\"), \" module will be used to transform the source CSS into an\\n\", mdx(\"a\", {\n    href: \"http://en.wikipedia.org/wiki/Abstract_syntax_tree\"\n  }, mdx(\"abbr\", {\n    title: \"Abstract Syntax Tree\"\n  }, \"AST\")), \"\\nfor manipulation with JavaScript.\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/color\"\n  }), \"Color\"), \" will be used to convert the values found in the stylesheet to hexidecimal.\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://jxnblk.com/colorable\"\n  }), \"Colorable\"), \" will be used to get color contrast values and\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.w3.org/TR/WCAG20/#visual-audio-contrast\"\n  }), \"WCAG\"), \"\\nscores for every possible pairing of colors.\\nAnd \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://lodash.com/docs\"\n  }), \"lodash\"), \" will be used to find unique color values and\\nto render templates to HTML.\"), mdx(\"p\", null, \"Copy a CSS file into the project to use as a source for the color values.\\nThis tutorial will use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.basscss.com/docs/\"\n  }), \"Basscss\"), \" as an example.\"), mdx(\"h2\", {\n    \"id\": \"build-script\"\n  }, \"Build Script\"), mdx(\"p\", null, \"Create a new \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.js\"), \" file that will be used to read the CSS file and eventually to generate an HTML page.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// build.js\\nvar fs = require('fs')\\n\\n// Read the contents of basscss.css\\nvar css = fs.readFileSync('basscss.css', 'utf8')\\n\\nconsole.log(css)\\n\")), mdx(\"p\", null, \"For now, this script just logs the stylesheet.\"), mdx(\"h2\", {\n    \"id\": \"package-scripts\"\n  }, \"Package Scripts\"), mdx(\"p\", null, \"Add a script to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \" for the build script.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"// package.json\\n\\\"scripts\\\": {\\n  \\\"start\\\": \\\"node build\\\"\\n}\\n\")), mdx(\"p\", null, \"Run the script to make sure everything is working.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm start\\n\")), mdx(\"h2\", {\n    \"id\": \"parsing-css\"\n  }, \"Parsing CSS\"), mdx(\"p\", null, \"Create a new \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lib/parse-colors.js\"), \" file for parsing the CSS.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// lib/parse-colors.js\\nvar _ = require('lodash')\\nvar postcss = require('postcss')\\nvar Color = require('color')\\n\\nmodule.exports = function(css) {\\n  // Array of colors to return\\n  var colors = []\\n\\n  // Parse the CSS file and get the AST\\n  var root = postcss.parse(css)\\n\\n  // Iterate through each declaration and log the property\\n  root.eachDecl(function(decl) {\\n    console.log(decl.prop)\\n  })\\n\\n  return colors\\n}\\n\")), mdx(\"p\", null, \"Use this module in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.js\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// build.js\\nvar fs = require('fs')\\nvar parseColors = require('./lib/parse-colors')\\n\\n// Read the contents of basscss.css\\nvar css = fs.readFileSync('basscss.css', 'utf8')\\nvar colors = parseColors(css)\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"parse-colors\"), \" module takes raw CSS and transforms it into an AST that can be iterated over.\\nFor now, this just logs all the properties found in the stylesheet.\"), mdx(\"h2\", {\n    \"id\": \"filtering-colors\"\n  }, \"Filtering Colors\"), mdx(\"p\", null, \"Next update the parse module to filter out everything but \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"color\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"background-color\"), \" properties,\\nconvert the values to hex, and remove duplicates.\\nWhile color values can be used in other properties including the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"background\"), \" shorthand,\\nhandling that would add complexity and will be omitted from this tutorial.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// lib/parse-colors.js\\nvar _ = require('lodash')\\nvar postcss = require('postcss')\\nvar Color = require('color')\\n\\nmodule.exports = function(css) {\\n\\n  var colors = []\\n  var root = postcss.parse(css)\\n\\n  // Iterate through each color and background-color declaration\\n  root.eachDecl(/(color|background\\\\-color)/, function(decl) {\\n    // Add each color value to the colors array\\n    colors.push(decl.value)\\n  })\\n\\n  // Convert all color values to hex strings\\n  colors = colors.map(function(color) {\\n    var hex\\n    try {\\n      hex = Color(color).hexString()\\n      return hex\\n    } catch(e) {\\n      // Handle color values like inherit and currentcolor\\n      return false\\n    }\\n  })\\n  .filter(function(value) {\\n    // Remove false values\\n    return value\\n  })\\n\\n  // Remove duplicate values\\n  colors = _.uniq(colors)\\n\\n  return colors\\n\\n}\\n\")), mdx(\"p\", null, \"The first argument in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"root.eachDecl\"), \" is a regular expression to filter declarations for either \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"color\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"background-color\"), \".\\nSee the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/postcss/postcss/blob/master/docs/api.md#containereachdeclpropfilter-callback\"\n  }), \"PostCSS documentation\"), \" for more details.\\nThe \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Color().hexString()\"), \" method converts any valid color value to hex format. The lodash \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_.uniq\"), \" method removes duplicate values from an array.\"), mdx(\"h2\", {\n    \"id\": \"html-template\"\n  }, \"HTML Template\"), mdx(\"p\", null, \"Next, create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"template.html\"), \" file for displaying the colors.\\nThis tutorial uses lodash templates, but any JavaScript templating language would work.\\nNote: if you\\u2019re using a stylesheet other than Basscss, the classes applied below may differ.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<!DOCTYPE html>\\n<!-- template.html -->\\n<html>\\n<head>\\n  <meta charset=\\\"utf-8\\\">\\n  <title>Color Palette Docs Demo</title>\\n  <link rel=\\\"stylesheet\\\" href=\\\"basscss.css\\\">\\n</head>\\n<body class=\\\"px3\\\">\\n  <header class=\\\"py3\\\">\\n    <h1>Color Palette Docs Demo</h1>\\n  </header>\\n  <ul class=\\\"list-reset flex flex-wrap flex-justify mxn2\\\">\\n    <% colors.map(renderColor) %>\\n  </ul>\\n  <% function renderColor(color) { %>\\n    <li class=\\\"m2\\\">\\n      <div style=\\\"background-color:<%= color %>\\\"\\n        class=\\\"p4\\\"></div>\\n      <%= color %>\\n    </li>\\n  <% } %>\\n</body>\\n</html>\\n\")), mdx(\"p\", null, \"Inside the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ul>\"), \" the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".map()\"), \" method is used to iterate over the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"colors\"), \" array and passes the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"renderColor\"), \" function as a callback.\\nThe \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"renderColor\"), \" function then renders an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<li>\"), \" for each color with a div that has its background color set to that value.\"), mdx(\"p\", null, \"Edit \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.js\"), \" to read the template and generate an HTML file.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// build.js\\nvar _ = require('lodash')\\nvar fs = require('fs')\\nvar parseColors = require('./lib/parse-colors')\\n\\nvar css = fs.readFileSync('basscss.css', 'utf8')\\n// Read the template string\\nvar template = fs.readFileSync('template.html', 'utf8')\\n// Create a lodash template function\\nvar tpl = _.template(template)\\nvar colors = parseColors(css)\\n\\n// Render the template function to an HTML string\\nvar html = tpl({ colors: colors })\\n\\n// Write an HTML file to disk\\nfs.writeFileSync('index.html', html)\\n\")), mdx(\"p\", null, \"Now run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm start\"), \" which should generate an HTML file with the colors parsed from the stylesheet.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm start && open index.html\\n\")), mdx(\"img\", {\n    src: \"http://jxnblk.s3.amazonaws.com/assets/images/css-color-palette.png\",\n    alt: \"Color palette demo\",\n    width: \"768\",\n    height: \"496\"\n  }), mdx(\"h2\", {\n    \"id\": \"readable-color-combinations\"\n  }, \"Readable Color Combinations\"), mdx(\"p\", null, \"The Colorable module takes an array of colors and returns a nested array of color combinations, along with their contrast values to test for readability. This can be useful for seeing what foreground-background pairs can and can\\u2019t be used for text.\"), mdx(\"p\", null, \"Create a new \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lib/parse-combos.js\"), \" file.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// lib/parse-combos.js\\nvar colorable = require('colorable')\\n\\nmodule.exports = function(colors) {\\n\\n  var combos = []\\n  // Get the Colorable array\\n  var arr = colorable(colors)\\n\\n  // Flatten the array and combine the foreground and background colors\\n  arr.forEach(function(color) {\\n    var pairing = color.hex\\n    color.combinations.forEach(function(combo) {\\n      combo.pairing = pairing\\n      combos.push(combo)\\n    })\\n  })\\n\\n  // Sort the array by contrast from high to low\\n  combos.sort(function(a, b) {\\n    return b.contrast - a.contrast\\n  })\\n\\n  return combos\\n\\n}\\n\")), mdx(\"p\", null, \"Add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"parse-combos\"), \" module to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build.js\"), \" and pass the combos array into the template function.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// build.js\\nvar _ = require('lodash')\\nvar fs = require('fs')\\nvar parseColors = require('./lib/parse-colors')\\nvar parseCombos = require('./lib/parse-combos')\\n\\nvar css = fs.readFileSync('basscss.css', 'utf8')\\nvar template = fs.readFileSync('template.html', 'utf8')\\nvar tpl = _.template(template)\\nvar colors = parseColors(css)\\nvar combos = parseCombos(colors)\\n\\nvar html = tpl({\\n  colors: colors,\\n  combos: combos\\n})\\nfs.writeFileSync('index.html', html)\\n\")), mdx(\"p\", null, \"Add a section to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"template.html\"), \" to display the color combinations.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"  <h2>Combinations</h2>\\n  <ul class=\\\"list-reset flex flex-wrap\\\">\\n    <% combos.map(renderCombo) %>\\n  </ul>\\n  <% function renderCombo(combo) { %>\\n    <li class=\\\"py2 col-6 sm-col-4 md-col-3 lg-col-2\\\"\\n      style=\\\"color:<%= combo.pairing %>;background-color:<%= combo.hex %>\\\">\\n      <div class=\\\"h1 bold px2\\\">\\n        Aa\\n      </div>\\n      <div class=\\\"h5 px2\\\">\\n        <%= combo.pairing %>\\n        <br>\\n        <%= combo.hex %>\\n        <br>\\n        <%= combo.contrast.toFixed(2) %>\\n      </div>\\n    </li>\\n  <% } %>\\n\")), mdx(\"p\", null, \"Run the build script. You should now have a list of color combinations along with the contrast value for each pair.\"), mdx(\"img\", {\n    src: \"http://jxnblk.s3.amazonaws.com/assets/images/css-color-combos.jpg\",\n    alt: \"Color combination demo\",\n    width: \"768\",\n    height: \"576\"\n  }), mdx(\"p\", null, \"While seeing combinations that don\\u2019t have high enough contrast might be useful,\\nfor this tutorial set Colorable\\u2019s \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"threshold\"), \" option to 3\\nto only show combinations that pass the WCAG minimum for large text.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// lib/parse-combos.js\\n  // ...\\n  var combos = []\\n  var arr = colorable(colors, { threshold: 3 })\\n  // ...\\n\")), mdx(\"p\", null, \"Run the build script again. Now you should only see color combinations with a contrast value of 3 or above.\"), mdx(\"p\", null, \"At this point, feel free to edit the styles of the rendered template and explore different ways of showing this information.\\nYou can also swap \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"basscss.css\"), \" out for another framework or stylesheet to test things out.\"), mdx(\"h2\", {\n    \"id\": \"expanding-upon-this-idea\"\n  }, \"Expanding Upon This Idea\"), mdx(\"p\", null, \"In addition to displaying raw color values and contrast ratios,\\nother aspects of color can be extracted from a stylesheet,\\nsuch as the selectors used for each color or the number of times each color is used in a stylesheet.\\nYou could also show colors sorted by similarity to help expose\\ninconsistencies and opportunities to normalize the design.\"), mdx(\"p\", null, \"While this is not a complete replacement for human written documentation,\\nand creating guidelines around color usage requires carefully considered writing,\\nusing automated tooling to generate source-code-derived documentation\\nfor things like color values can help create better living style guides.\"));\n}\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"8873dabf-cccd-565c-8309-226d7ccd5791"}}