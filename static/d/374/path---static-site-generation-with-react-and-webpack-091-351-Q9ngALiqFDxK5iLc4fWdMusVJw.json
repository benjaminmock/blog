{"data":{"mdx":{"id":"50aa8a6f-6849-5a33-bf7a-7ddc48c8d68b","frontmatter":{"title":"Static Site Generation with React and Webpack","date":"June 06, 2015","draft":null},"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Static Site Generation with React and Webpack\",\n  \"date\": \"2015-06-06T00:00:00.000Z\",\n  \"tags\": [\"react\", \"webpack\", \"static-site\", \"tutorial\"],\n  \"related\": [{\n    \"name\": \"Building SVG Icons with React\",\n    \"href\": \"http://jxnblk.com/react-icons\"\n  }, {\n    \"name\": \"React Static Site by Brad Denver\",\n    \"href\": \"http://braddenver.com/blog/2015/react-static-site.html\"\n  }, {\n    \"name\": \"Antwar\",\n    \"href\": \"http://antwarjs.github.io/\"\n  }]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components\n  }), mdx(\"p\", null, \"I\\u2019ve been dabbling with React for a few months now and using it in several small open source projects\\nto better understand the technology.\\nReact\\u2019s focus on reusablility, along with the ability to install and require components via npm,\\nprovides an elegant way to rapidly build application UI in an efficient and consistent way.\\nIt\\u2019s also a great way to handle server-side rendering and provides high cohesion between markup and display logic.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note: many of the packages referenced in this post have released major version, breaking updates since this was written. Some of the examples may not work with the latest npm modules, especially the react-router package, which has a much different API now.\")), mdx(\"h2\", {\n    \"id\": \"why\"\n  }, \"Why\"), mdx(\"p\", null, \"React is incredibly intuitive and flexible to work with,\\nbut relying solely on client side rendering\\nleaves a lot to be desired in regards to percieved performance.\\nWith a static React site, the page loads just like any other static HTML,\\nand the JavaScript kicks in whenever it\\u2019s downloaded.\\nThis is extremely helpful for combining documentation with interactive demonstrations,\\nlike \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://jxnblk.com/colorable\"\n  }), \"Colorable\"), \" or \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://jxnblk.com/react-icons\"\n  }), \"Building SVG Icons with React\"), \".\\nUsing React with webpack also allows you to consolidate the entire build process\\nin Node and take advantage of anything in the npm ecosystem.\\nLast but not least, React is just fun to use.\"), mdx(\"h2\", {\n    \"id\": \"how\"\n  }, \"How\"), mdx(\"p\", null, \"Although there are several ways to render static sites with React,\\nthe following is what I\\u2019ve found to be easiest.\"), mdx(\"p\", null, \"First start a fresh project and initialize npm.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"mkdir react-static-site\\ncd react-static-site\\nnpm init\\n\")), mdx(\"p\", null, \"Install the following modules.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm i --save-dev react webpack webpack-dev-server jsx-loader static-site-generator-webpack-plugin react-router\\n\")), mdx(\"p\", null, mdx(\"a\", {\n    href: \"http://webpack.github.io/\",\n    target: \"_blank\"\n  }, \"Webpack\"), \" and webpack-dev-server will be used for the entire build process and can also handle assets such as CSS, images, and fonts.\\nThe jsx-loader is used to transpile imported jsx files. If you prefer ES6, you can use babel-loader instead of jsx-loader.\\nThe \", mdx(\"a\", {\n    href: \"https://github.com/markdalgleish/static-site-generator-webpack-plugin\",\n    target: \"_blank\"\n  }, \"static-site-generator-webpack-plugin\"), \" module is what is used to generate static HTML.\\nAnd \", mdx(\"a\", {\n    href: \"http://rackt.github.io/react-router/\",\n    target: \"_blank\"\n  }, \"React Router\"), \" is used to handle routing. For single page static sites, React Router is not needed.\"), mdx(\"h2\", {\n    \"id\": \"set-up-webpack\"\n  }, \"Set up Webpack\"), mdx(\"p\", null, \"Webpack is a module bundler similar to Browserify, but can also replace front-end build systems like Grunt and Gulp.\"), mdx(\"p\", null, \"First off, you\\u2019ll need a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"webpack.config.js\"), \" file. The webpack command line interface will use this config file.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// webpack.config.js\\nvar StaticSiteGeneratorPlugin = require('static-site-generator-webpack-plugin')\\nvar data = require('./data')\\n\\nmodule.exports = {\\n  entry: './entry.js',\\n\\n  output: {\\n    filename: 'bundle.js',\\n    path: __dirname,\\n    libraryTarget: 'umd'\\n  },\\n\\n  module: {\\n    loaders: [\\n      { test: /\\\\.jsx$/, loader: 'jsx-loader' }\\n    ]\\n  },\\n\\n  plugins: [\\n    new StaticSiteGeneratorPlugin('bundle.js', data.routes, data)\\n  ]\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"create-an-entry-file\"\n  }, \"Create an Entry File\"), mdx(\"p\", null, \"The entry file is what webpack will read to build \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bundle.js\"), \",\\nand the static-site-generator-webpack-plugin uses the bundle to generate HTML.\"), mdx(\"p\", null, \"For a single rendered page, you can skip React Router and create an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"entry.js\"), \" file like the following.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// entry.js with no routing\\nvar React = require('react')\\nvar Root = require('./components/Root.jsx')\\n\\nmodule.exports = function render(locals, callback) {\\n  var html = React.renderToStaticMarkup(React.createElement(Root, locals))\\n  callback(null, '<!DOCTYPE html>' + html)\\n}\\n\")), mdx(\"p\", null, \"For handling multiple routes, update the entry file using React Router and create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Routes.jsx\"), \" file.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// entry.js\\nvar React = require('react')\\nvar Router = require('react-router')\\nvar Routes = require('./Routes.jsx')\\n\\nmodule.exports = function render(locals, callback) {\\n  Router.run(Routes, locals.path, function (Handler) {\\n    var html = React.renderToStaticMarkup(React.createElement(Handler, locals))\\n    callback(null, '<!DOCTYPE html>' + html)\\n  })\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Routes.jsx\\nvar React = require('react')\\nvar Router = require('react-router')\\nvar Route = Router.Route\\nvar DefaultRoute = Router.DefaultRoute\\nvar Root = require('./components/Root.jsx')\\nvar Index = require('./components/Index.jsx')\\n\\nvar Routes = (\\n  <Route handler={Root} path='/'>\\n    <DefaultRoute handler={Index} />\\n  </Route>\\n)\\n\\nmodule.exports = Routes\\n\")), mdx(\"h2\", {\n    \"id\": \"create-a-data-file\"\n  }, \"Create a Data File\"), mdx(\"p\", null, \"Next create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"data.js\"), \" file that will include initial props passed to the Root component and routes used for the router.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// data.js\\nmodule.exports = {\\n  title: 'My Static Site',\\n  routes: [\\n    '/'\\n  ]\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"create-rootjsx\"\n  }, \"Create Root.jsx\"), mdx(\"p\", null, \"The Root component will include the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<html>\"), \" element, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<head>\"), \" and other code that will be shared across all pages.\\nThe page components themselves will be passed through the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<RouteHander>\"), \" component with React Router.\\nTo keep things somewhat organized, create this file in a new \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"components\"), \" directory.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// components/Root.jsx\\nvar React = require('react')\\nvar Router = require('react-router')\\nvar RouteHandler = Router.RouteHandler\\n\\nvar Root = React.createClass({\\n  render: function () {\\n    return (\\n      <html>\\n        <head>\\n          <title>{this.props.title}</title>\\n        </head>\\n        <body>\\n          <RouteHandler {...this.props} />\\n        </body>\\n      </html>\\n    )\\n  }\\n})\\n\\nmodule.exports = Root\\n\")), mdx(\"h2\", {\n    \"id\": \"create-indexjsx\"\n  }, \"Create Index.jsx\"), mdx(\"p\", null, \"The Index component will be the page rendered with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<DefaultRoute>\"), \" and should contain the content for the root \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index.html\"), \" file.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// components/Index.jsx\\nvar React = require('react')\\n\\nvar Index = React.createClass({\\n  render: function () {\\n    return (\\n      <main>\\n        Index component\\n      </main>\\n    )\\n  }\\n})\\n\\nmodule.exports = Index\\n\")), mdx(\"h2\", {\n    \"id\": \"package-scripts\"\n  }, \"Package Scripts\"), mdx(\"p\", null, \"Add the following scripts to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \" to run webpack.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"\\\"scripts\\\": {\\n  \\\"webpack\\\": \\\"webpack --progress --colors\\\",\\n  \\\"dev\\\": \\\"webpack-dev-server --progress --colors\\\",\\n  \\\"start\\\": \\\"npm run dev\\\"\\n}\\n\")), mdx(\"p\", null, \"Run the start script to start a development server.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm start\\n\")), mdx(\"p\", null, \"Open \", mdx(\"a\", {\n    href: \"http://localhost:8080\",\n    target: \"_blank\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://localhost:8080\"\n  }), \"http://localhost:8080\")), \" in a browser.\\nYou should see an unstyled page with the words \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Index component\"), \".\"), mdx(\"h2\", {\n    \"id\": \"adding-pages\"\n  }, \"Adding Pages\"), mdx(\"p\", null, \"Next, add a new route for an \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"about\"), \" page.\\nIn \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"data.js\"), \" add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/about\"), \" to the routes array.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// data.js\\nmodule.exports = {\\n  title: 'My Static Site',\\n  routes: [\\n    '/',\\n    '/about'\\n  ]\\n}\\n\")), mdx(\"p\", null, \"Edit the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Routes.jsx\"), \" file to handle the new route.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Routes.jsx\\nvar React = require('react')\\nvar Router = require('react-router')\\nvar Route = Router.Route\\nvar DefaultRoute = Router.DefaultRoute\\nvar Root = require('./components/Root.jsx')\\nvar Index = require('./components/Index.jsx')\\nvar About = require('./components/About.jsx')\\n\\nvar Routes = (\\n  <Route handler={Root} path='/'>\\n    <DefaultRoute handler={Index} />\\n    <Route path='/about' handler={About} />\\n  </Route>\\n)\\n\\nmodule.exports = Routes\\n\")), mdx(\"p\", null, \"Create a new \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"About.jsx\"), \" component.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// components/About.jsx\\nvar React = require('react')\\n\\nvar About = React.createClass({\\n  render: function () {\\n    return (\\n      <main>\\n        About component\\n      </main>\\n    )\\n  }\\n})\\n\\nmodule.exports = About\\n\")), mdx(\"p\", null, \"Stop and restart the development server and navigate to\\n\", mdx(\"a\", {\n    href: \"http://localhost:8080/about\",\n    target: \"_blank\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://localhost:8080/about\"\n  }), \"http://localhost:8080/about\")), \".\\nYou should see a page similar to the index but with the words \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"About component\"), \".\"), mdx(\"p\", null, \"React-router can also handle route params such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"posts/:id\"), \" for dynamic routing \\u2013\\n\", mdx(\"a\", {\n    href: \"http://rackt.github.io/react-router/\",\n    target: \"_blank\"\n  }, \"View the docs\"), \" to learn more.\"), mdx(\"h2\", {\n    \"id\": \"render-to-static-markup\"\n  }, \"Render to Static Markup\"), mdx(\"p\", null, \"Stop the development server and run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm run webpack\"), \". This should generate two static \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index.html\"), \" files in the root and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"about\"), \" directories.\"), mdx(\"h2\", {\n    \"id\": \"adding-client-side-js\"\n  }, \"Adding Client-Side JS\"), mdx(\"p\", null, \"In order to use React for client side JavaScript, you\\u2019ll need to ensure that the props match up between the static page and the bundle.js file.\"), mdx(\"p\", null, \"First, edit \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"entry.js\"), \" to change the render function\\nfrom \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.renderToStaticMarkup\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.renderToString\"), \"\\nand add a conditional block that will only run client-side.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// entry.js\\nvar React = require('react')\\nvar Router = require('react-router')\\nvar Routes = require('./Routes.jsx')\\n\\nif (typeof document !== 'undefined') {\\n  var initialProps = JSON.parse(document.getElementById('initial-props').innerHTML)\\n  Router.run(Routes, Router.HistoryLocation, function (Handler) {\\n    React.render(React.createElement(Handler, initialProps), document)\\n  })\\n}\\n\\nmodule.exports = function render(locals, callback) {\\n  Router.run(Routes, locals.path, function (Handler) {\\n    var html = React.renderToString(React.createElement(Handler, locals))\\n    callback(null, '<!DOCTYPE html>' + html)\\n  })\\n}\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"initialProps\"), \" value will come from a script tag with the id \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"initial-props\"), \".\\nUpdate the Root component to add this script tag, add a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"safeStringify\"), \" function, and link to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bundle.js\"), \" file.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// components/Root.jsx\\nvar React = require('react')\\nvar Router = require('react-router')\\nvar RouteHandler = Router.RouteHandler\\n\\nvar Root = React.createClass({\\n  render: function () {\\n    var initialProps = {\\n      __html: safeStringify(this.props)\\n    }\\n\\n    return (\\n      <html>\\n        <head>\\n          <title>{this.props.title}</title>\\n        </head>\\n        <body>\\n          <RouteHandler {...this.props} />\\n          <script\\n            id='initial-props'\\n            type='application/json'\\n            dangerouslySetInnerHTML={initialProps} />\\n          <script src='bundle.js' />\\n        </body>\\n      </html>\\n    )\\n  }\\n})\\n\\nfunction safeStringify(obj) {\\n  return JSON.stringify(obj).replace(/<\\\\/script/g, '<\\\\\\\\/script').replace(/<!--/g, '<\\\\\\\\!--')\\n}\\n\\nmodule.exports = Root\\n\")), mdx(\"h2\", {\n    \"id\": \"navigation-links\"\n  }, \"Navigation Links\"), mdx(\"p\", null, \"To link the pages together, create a new Header component.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// components/Header.jsx\\nvar React = require('react')\\n\\nvar Header = React.createClass({\\n  render: function () {\\n    return (\\n      <header>\\n        <a href='/'>Index</a>\\n        <a href='/about'>About</a>\\n      </header>\\n    )\\n  }\\n})\\n\\nmodule.exports = Header\\n\")), mdx(\"p\", null, \"Add the Header to the Root component\\u2019s render function.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// components/Root.jsx\\nvar React = require('react')\\nvar Router = require('react-router')\\nvar RouteHandler = Router.RouteHandler\\nvar Header = require('./Header.jsx')\\n\\nvar Root = React.createClass({\\n  render: function () {\\n    var initialProps = {\\n      __html: safeStringify(this.props)\\n    }\\n\\n    return (\\n      <html>\\n        <head>\\n          <title>{this.props.title}</title>\\n        </head>\\n        <body>\\n          <Header />\\n          <RouteHandler {...this.props} />\\n          <script\\n            id='initial-props'\\n            type='application/json'\\n            dangerouslySetInnerHTML={initialProps} />\\n          <script src='bundle.js' />\\n        </body>\\n      </html>\\n    )\\n  }\\n})\\n\\nfunction safeStringify(obj) {\\n  return JSON.stringify(obj).replace(/<\\\\/script/g, '<\\\\\\\\/script').replace(/<!--/g, '<\\\\\\\\!--')\\n}\\n\\nmodule.exports = Root\\n\")), mdx(\"h2\", {\n    \"id\": \"using-client-side-routing\"\n  }, \"Using Client-Side Routing\"), mdx(\"p\", null, \"React router can also do client-side routing using the Link component.\\nThis can make transitioning pages feel faster and behaves like a fake single-page application.\"), mdx(\"p\", null, \"To use client-side routing, replace the anchor links in the Header with React Routers\\u2019s Link components.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// components/Header.jsx\\nvar React = require('react')\\nvar Router = require('react-router')\\nvar Link = Router.Link\\n\\nvar Header = React.createClass({\\n  render: function () {\\n    return (\\n      <header>\\n        <Link to='/'>Index</Link>\\n        <Link to='/about'>About</Link>\\n      </header>\\n    )\\n  }\\n})\\n\\nmodule.exports = Header\\n\")), mdx(\"h2\", {\n    \"id\": \"adding-critical-css\"\n  }, \"Adding Critical CSS\"), mdx(\"p\", null, \"Although there are many different approaches to styling components in React,\\nadding some critical CSS base styles to the head can help speed up performance and development time.\\nYou can skip this step if you prefer using inline styles or linking to a larger stylesheet.\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"UPDATE: Originally, this tutorial showed how to include CSS using props.\\nUsing a combination of css-loader and cssnext-loader seems to be a better solution\\nas it doesn't require restarting the server when making changes to the stylesheet\\nand doesn't duplicate the CSS in the \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"initialProps\"), \" JSON object.\")), mdx(\"p\", null, \"First install \", mdx(\"a\", {\n    href: \"http://basscss.com\",\n    target: \"_blank\"\n  }, \"Basscss\"), \",\\n\", mdx(\"a\", {\n    href: \"https://github.com/webpack/css-loader\",\n    target: \"_blank\"\n  }, \"css-loader\"), \",\\nand \", mdx(\"a\", {\n    href: \"https://github.com/cssnext/cssnext-loader\",\n    target: \"_blank\"\n  }, \"cssnext-loader\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm i --save-dev basscss css-loader cssnext-loader\\n\")), mdx(\"p\", null, \"Add css-loader and cssnext-loader to the webpack config as well as options for cssnext.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// webpack.config.js\\nvar StaticSiteGeneratorPlugin = require('static-site-generator-webpack-plugin')\\nvar data = require('./data')\\n\\nmodule.exports = {\\n  entry: './entry.js',\\n\\n  output: {\\n    filename: 'bundle.js',\\n    path: __dirname,\\n    libraryTarget: 'umd'\\n  },\\n\\n  module: {\\n    loaders: [\\n      { test: /\\\\.jsx$/, loader: 'jsx-loader' },\\n      { test: /\\\\.css/, loader: 'css-loader!cssnext-loader' }\\n    ]\\n  },\\n\\n  plugins: [\\n    new StaticSiteGeneratorPlugin('bundle.js', data.routes, data)\\n  ],\\n\\n  cssnext: {\\n    compress: true,\\n    features: {\\n      rem: false,\\n      pseudoElements: false,\\n      colorRgba: false\\n    }\\n  }\\n\\n}\\n\")), mdx(\"p\", null, \"In the cssnext configuration options, the output is compressed and the rem and colorRgba postcss plugins have been disabled.\"), mdx(\"p\", null, \"Create a new \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"css\"), \" directory and a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"base.css\"), \" file.\\nImport Basscss and set a new value for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--font-family\"), \" custom property.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }), \"/* css/base.css */\\n@import 'basscss';\\n\\n:root {\\n  --font-family: 'Avenir Next', 'Hevletica Neue', sans-serif;\\n}\\n\")), mdx(\"p\", null, \"In the Root component, import the stylesheet, add a style tag to the head, and add some padding to the body.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// components/Root.jsx\\nvar React = require('react')\\nvar Router = require('react-router')\\nvar RouteHandler = Router.RouteHandler\\nvar Header = require('./Header.jsx')\\nvar css = require('../css/base.css')\\n\\nvar Root = React.createClass({\\n  render: function () {\\n    var initialProps = {\\n      __html: safeStringify(this.props)\\n    }\\n\\n    return (\\n      <html>\\n        <head>\\n          <title>{this.props.title}</title>\\n          <style dangerouslySetInnerHTML={{ __html: css }} />\\n        </head>\\n        <body className='p2'>\\n          <Header />\\n          <RouteHandler {...this.props} />\\n          <script\\n            id='initial-props'\\n            type='application/json'\\n            dangerouslySetInnerHTML={initialProps} />\\n          <script src='bundle.js' />\\n        </body>\\n      </html>\\n    )\\n  }\\n})\\n\\nfunction safeStringify(obj) {\\n  return JSON.stringify(obj).replace(/<\\\\/script/g, '<\\\\\\\\/script').replace(/<!--/g, '<\\\\\\\\!--')\\n}\\n\\nmodule.exports = Root\\n\")), mdx(\"p\", null, \"Restart the dev server to see the changes.\"), mdx(\"p\", null, \"You should now have a basic static site rendered with React.\\nFor a complete example, see the\\n\", mdx(\"a\", {\n    href: \"https://github.com/jxnblk/react-static-site-boilerplate\",\n    target: \"_blank\"\n  }, \"Boilerplate Demo\"), \"\\nor check out the\\n\", mdx(\"a\", {\n    href: \"https://github.com/jxnblk/blog\",\n    target: \"_blank\"\n  }, \"source for this blog\"), \" or\\n\", mdx(\"a\", {\n    href: \"https://github.com/basscss/basscss.github.io\",\n    target: \"_blank\"\n  }, \"the Basscss docs\"), \",\\nwhich use a very similar approach.\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Update\"), \" Matthew Jones has forked and created an\\n\", mdx(\"a\", {\n    href: \"https://github.com/ookk/react-static-boilerplate-ES6\",\n    target: \"_blank\"\n  }, \"ES6 boilerplate\"), \"\\nif you'd like to learn more.\"), mdx(\"h2\", {\n    \"id\": \"other-considerations-and-improvements\"\n  }, \"Other Considerations and Improvements\"), mdx(\"p\", null, \"Since this uses webpack, there are also ways to include image assets and fonts in the bundle, but I haven\\u2019t tried this so your mileage may vary.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"routes\"), \" array is passed in as props, and navigation links could be created dynamically rather than being hard coded.\\nThis could make handling lots of pages easier.\"), mdx(\"p\", null, \"If you\\u2019re hosting the static site on gh-pages, you\\u2019ll need a way to handle the base url when using React Router\\u2019s Link component.\\nI don\\u2019t know of a good way to do this yet and would love to hear suggestions on how to improve that.\"), mdx(\"p\", null, mdx(\"del\", {\n    parentName: \"p\"\n  }, \"Handling the CSS as shown above can lead to a fairly large chunk of JSON being inserted into the initial-props script tag,\\nand I\\u2019m not sure if there\\u2019s a better way to handle that.\")), mdx(\"p\", null, \"This is just one way to build static sites with React.\\nIf you\\u2019ve seen other ways or have any suggestions for improving on this, I\\u2019d love to hear them.\"));\n}\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"50aa8a6f-6849-5a33-bf7a-7ddc48c8d68b"}}