{"data":{"mdx":{"id":"847780f4-97b7-5302-958e-b23d435aed61","frontmatter":{"title":"Components","date":"June 17, 2016","draft":null},"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Components\",\n  \"date\": \"2016-06-17T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components\n  }), mdx(\"p\", null, \"Everything in a UI is a component.\\nThis includes buttons, inputs, forms, promotional modules, pages, user flows, etc.\\nI use the word \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"component\"), \" not only because this is how the underlying code is written in libraries like React and Ember,\\nbut also because pieces of a well-designed UI system should be \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/Composability\"\n  }), \"composable\"), \".\"), mdx(\"p\", null, \"From the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/Composability\"\n  }), \"Wikipedia page on Composability\"), \":\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"A highly composable system provides recombinant components that can be selected and assembled in various combinations to satisfy specific user requirements. In information systems, the essential features that make a component composable are that it be:\"), mdx(\"ul\", {\n    parentName: \"blockquote\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"self-contained (modular): it can be deployed independently \\u2013 note that it may cooperate with other components, but dependent components are replaceable\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"stateless: it treats each request as an independent transaction, unrelated to any previous request. Stateless is just one technique; managed state and transactional systems can also be composable, but with greater difficulty.\"))), mdx(\"h2\", {\n    \"id\": \"modular--stateless-components\"\n  }, \"Modular & Stateless Components\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"state => ui\\n\")), mdx(\"p\", null, \"A UI system that is made up of independent stateless components is extremely flexible.\\nWhen individual pieces need to be swapped out or updated,\\nthose changes are isolated and don\\u2019t cause other parts of a system to break.\\nThinking about these components as being pure functions \\u2013\\nthat is, the same state always produces the same output \\u2013\\ncan help ensure composability.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"A pure function is one that exhibits the property of substitution: replacing a call with its returned value should make the program equivalent. As an example, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"concat('hello', 'world')\"), \" can be substituted with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"'hello world'\"), \" without changing the behavior of your program.\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"How can we apply this to a graphical user interface? By having the function return an abstract representation of widgets (or markup) to be rendered on the screen...\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\u2013 \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://rauchg.com/2015/pure-ui/\"\n  }), \"Pure UI by Guillermo Rauch\"))), mdx(\"h2\", {\n    \"id\": \"why-is-everything-a-component\"\n  }, \"Why is everything a \\u201Ccomponent?\\u201D\"), mdx(\"p\", null, \"Naming things is hard, there\\u2019s no debate there, but when you start to categorize different parts of a UI into pages, views, flows, atoms, molecules, materials, or kittens, you\\u2019ve already started to undermine the concept of composability, and it probably takes more time and effort to get an entire team of people to \\u201Cagree upon\\u201D your proposed naming conventions than it\\u2019s worth.\"), mdx(\"p\", null, \"The point of this is to think about everything as an interoperable system.\\nYou can slice and dice components in any way you see fit, and these components are likely to change and be fine tuned as a system is developed.\\nPremature optimization is a trap that\\u2019s easy to fall into.\\nEmbrace the chaos as you build.\\nPatterns will emerge from the primordial goop of UI that is your product,\\nand by consistently thinking about a composable system you\\u2019ll probably come up with something more flexible\\nand more robust than if one person dictates a dogmatic framework to work within.\"));\n}\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"847780f4-97b7-5302-958e-b23d435aed61"}}