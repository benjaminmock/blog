{"data":{"mdx":{"id":"24b13137-2b68-5a9c-8b1b-179e618bb91f","frontmatter":{"title":"Universal UI Components","date":"July 06, 2016","draft":null},"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Universal UI Components\",\n  \"date\": \"2016-07-06T00:00:00.000Z\",\n  \"related\": [{\n    \"name\": \"Components\",\n    \"href\": \"http://jxnblk.com/blog/posts/components\"\n  }, {\n    \"name\": \"Universal Components\",\n    \"href\": \"http://jxnblk.com/universal-components\"\n  }, {\n    \"name\": \"Rebass\",\n    \"href\": \"http://jxnblk.com/rebass\"\n  }, {\n    \"name\": \"cxs\",\n    \"href\": \"http://jxnblk.com/cxs\"\n  }, {\n    \"name\": \"React-cxs\",\n    \"href\": \"http://jxnblk.com/react-cxs\"\n  }, {\n    \"name\": \"hyp\",\n    \"href\": \"http://jxnblk.com/hyp\"\n  }]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components\n  }), mdx(\"p\", null, \"For a while now, I\\u2019ve been interested in the idea of creating portable,\\ninteroperable functional UI components that can work in any DOM rendering library,\\nwhether it\\u2019s\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://facebook.github.io/react/\"\n  }), \"React\"), \",\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://preactjs.com\"\n  }), \"Preact\"), \",\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/dominictarr/hyperscript\"\n  }), \"hyperscript\"), \",\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/shama/bel\"\n  }), \"bel\"), \",\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/maxogden/yo-yo\"\n  }), \"yo-yo\"), \",\\nor some other library.\"), mdx(\"p\", null, \"The idea of functional UI components is a simple one: pass arguments into a function and it returns a representation of the DOM,\\nusually with encapsulated styles and interactivity handled with callbacks to a global state, a la Redux.\"), mdx(\"p\", null, \"If you look at the currently available technology, there are predominantly three ways to create these components:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://facebook.github.io/jsx/\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"JSX\")), \" (from React) - uses an XML-like syntax to call functions that return representations of DOM elements\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/dominictarr/hyperscript\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"Hyperscript\")), \" - similar to JSX, but uses standard JavaScript syntax and function calls\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"ES2015 tagged template literals\")), \" - a new string type introduced to JavaScript\")), mdx(\"p\", null, \"Each has its own pros and cons. While JSX is mostly syntactic sugar, some prefer to use standard JavaScript syntax.\\nOne big advantage JSX has is that it abstracts away the function used to create DOM elements.\\nFor example, React uses \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.createElement\"), \" while Preact uses \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Preact.h\"), \".\\nThe pragma used in JSX is configurable by the end user.\\nHyperscript, although older than JSX, uses a similar function, but is written in standard JavaScript.\\nTagged template literals are also standard JavaScript,\\nbut require a little bit of extra code to change template literals into DOM elements.\"), mdx(\"h2\", {\n    \"id\": \"the-same-but-different\"\n  }, \"The same, but different\"), mdx(\"p\", null, \"Assuming we pick one of the above syntaxes,\\nthere are relatively few differences among the implementations of components across libraries.\\nFor example, here is a bare-bones Button component for several different libraries.\\nFor brevity, styles have been left out of these examples.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// React using JSX\\nimport React from 'react'\\n\\nconst Button = (props) => (\\n  <button {...props} />\\n)\\nexport default Button\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Preact using JSX\\nimport { h } from 'preact'\\n\\nconst Button = (props) => (\\n  <button {...props} />\\n)\\nexport default Button\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Hyperscript\\nimport h from 'hyperscript'\\n\\nconst Button = (props) => (\\n  h('button', props)\\n)\\nexport default Button\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// yo-yo using tagged template literals\\nimport yo from 'yo-yo'\\n\\nconst Button = ({ text, ...props }) => (\\n  yo`<button ${props}>${text}</button`\\n)\\nexport default Button\\n\")), mdx(\"p\", null, \"There are still quite a few differences in syntax between JSX, hyperscript, and tagged template literals.\\nFor the sake of this post, I\\u2019ll focus on implementing these components in JSX.\"), mdx(\"p\", null, \"The first three examples are covered, but here\\u2019s what the hyperscript and yo-yo examples would look like in JSX.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Hyperscript with JSX\\nimport h from 'hyperscript'\\n\\nconst Button = (props) => (\\n  <button {...props} />\\n)\\nexport default Button\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// bel (yo-yo) with JSX\\n// yo-yo uses the bel package to create elements\\nimport { createElement } from 'bel'\\n\\nconst Button = (props) => (\\n  <button {...props} />\\n)\\nexport default Button\\n\")), mdx(\"p\", null, \"For each of the non-React versions, JSX needs to be configured to use the appropriate pragma.\\nHyperscript and Preact both name their create element functions \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"h\"), \".\\nHere is an example \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".babelrc\"), \" configuration.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"presets\\\": [\\n    \\\"es2015\\\",\\n    \\\"stage-0\\\"\\n  ],\\n  \\\"plugins\\\": [\\n    [\\n      \\\"transform-react-jsx\\\",\\n      { \\\"pragma\\\": \\\"h\\\" }\\n    ]\\n  ]\\n}\\n\")), mdx(\"p\", null, \"Although the other libraries name their create element functions differently,\\nthey can all be named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"h\"), \" within the components for cross-library compatibility.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// React using JSX\\nimport { createElement as h } from 'react'\\n\\nconst Button = (props) => (\\n  <button {...props} />\\n)\\nexport default Button\\n\")), mdx(\"p\", null, \"At this point, the only difference in these components across libraries is the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"import\"), \" statement.\\nUsing a module bundler like webpack, even this can be abstracted out of the component module.\"), mdx(\"p\", null, \"Using webpack\\u2019s ProvidePlugin, the create element function can be exposed to all modules.\\nThis does involve having a variable in the global scope, but I think the trade-off might be worth it in some cases.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Custom create-element module\\nconst h = require('preact').h\\nmodule.exports = h\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Example webpack configuration for Preact\\nconst path = require('path')\\nconst webpack = require('webpack')\\n\\nmodule.exports = {\\n  ...,\\n  plugins: [\\n    new webpack.ProvidePlugin([\\n      h: path.resolve('./preact-create-element')\\n    ])\\n  ]\\n}\\n\")), mdx(\"p\", null, \"To avoid variable collisions, the function could be named anything (e.g. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__h\"), \") as long as the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".babelrc\"), \" pragma matches.\"), mdx(\"p\", null, \"In addition to the name of the create element function, there are some slight differences in the naming conventions\\nfor HTML attributes (e.g. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"htmlFor\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"className\"), \") and handling child elements.\\nTransforming these props could be handled in the custom function, but the implementation details have been left out of this post.\"), mdx(\"p\", null, \"With this configuration, the Button component can now be written like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const Button = (props) => (\\n  <button {...props} />\\n)\\nexport default Button\\n\")), mdx(\"p\", null, \"I\\u2019ve put up a rough demonstration of this concept, with the same two UI components being rendered to the DOM by\\nReact, Preact, hyperscript, and bel here: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://jxnblk.com/universal-components\"\n  }), \"Universal Components\"), \".\"), mdx(\"p\", null, \"With a little bit of configuration, a whole library of UI components could be written in a manner that would allow\\nthe DOM rendering library to be swapped out at some point in the future,\\nwithout the need to use a tool like \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/facebook/codemod\"\n  }), \"Codemod\"), \".\\nThere\\u2019s probably even a way to wrap components in an open-source library like \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://jxnblk.com/rebass\"\n  }), \"Rebass\"), \"\\nto make them compatible with more than one functional DOM rendering library as well.\"));\n}\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"24b13137-2b68-5a9c-8b1b-179e618bb91f"}}